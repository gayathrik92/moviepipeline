---
name: Backend CI Pipeline
on:
  pull_request:
    branches:
      - main
    paths:
      - backend/**
  workflow_dispatch: null
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies with pipenv
        run: |
          cd backend 
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Run linting with flake8
        id: lint
        run: cd backend &&  pipenv run flake8 --max-line-length=120
        continue-on-error: false
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies with pipenv
        run: |
          cd backend 
          python -m pip install --upgrade pip
          pip install pipenv 
          pipenv install --dev
      - name: Run tests with pytest
        run: cd backend && pipenv run pytest --maxfail=1 --disable-warnings -q
  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install pipenv and Docker
        run: |
          cd backend 
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
          sudo apt-get update
          sudo apt-get install -y docker.io
      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}
      - name: Build Docker image
        run: >
          cd backend 
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_BD }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]') 
          docker build -t "$IMAGE_TAG_LOWERCASE" -f Dockerfile .
          docker tag "$IMAGE_TAG_LOWERCASE" "${{ secrets.AWS_ECR_REPOSITORY_BD }}:latest"  
      - name: Push Docker image to AWS ECR
        run: |
          cd backend  
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_BD }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')
          docker push "$IMAGE_TAG_LOWERCASE"
          docker push "${{ secrets.AWS_ECR_REPOSITORY_BD }}:latest"
