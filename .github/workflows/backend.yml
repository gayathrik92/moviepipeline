---
name: Backend CI Pipeline
on:
  pull_request:
    branches:
      - main
    paths:
      - backend/**
  workflow_dispatch: null
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies with pipenv
        run: |
          cd backend 
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Run linting with flake8
        id: lint
        run: cd backend &&  pipenv run flake8 --max-line-length=120
        continue-on-error: false
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies with pipenv
        run: |
          cd backend 
          python -m pip install --upgrade pip
          pip install pipenv 
          pipenv install --dev
      - name: Run tests with pytest
        run: cd backend && pipenv run pytest --maxfail=1 --disable-warnings -q
  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies and Docker (with containerd.io resolution)
        run: |
          sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
          sudo rm -rf /etc/bash_completion.d/docker /usr/local/bin/docker-compose /etc/bash_completion.d/docker-compose
          sudo apt install containerd -y
          sudo apt install -y docker.io docker-compose
      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV	  
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}	 
      - name: Build Docker image
        run: >
          cd backend 
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_BD }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]') 
          docker build -t "$IMAGE_TAG_LOWERCASE" -f Dockerfile .
          docker tag "$IMAGE_TAG_LOWERCASE" "${{ secrets.AWS_ECR_REPOSITORY_BD }}:latest"  
      - name: Push Docker image to AWS ECR
        run: |
          cd backend  
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_BD }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')
          docker push "$IMAGE_TAG_LOWERCASE"
          docker push "${{ secrets.AWS_ECR_REPOSITORY_BD }}:latest"
